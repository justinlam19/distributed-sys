// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.21.12
// source: gpu_sim.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_IN_PROGRESS Status = 0
	Status_SUCCESS     Status = 1
	Status_FAILED      Status = 2
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "IN_PROGRESS",
		1: "SUCCESS",
		2: "FAILED",
	}
	Status_value = map[string]int32{
		"IN_PROGRESS": 0,
		"SUCCESS":     1,
		"FAILED":      2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_sim_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_gpu_sim_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{0}
}

type ForwardOp int32

const (
	ForwardOp_LINEAR_CROSS_ENTROPY ForwardOp = 0 // Perform a linear forward pass followed by cross-entropy loss computation
)

// Enum value maps for ForwardOp.
var (
	ForwardOp_name = map[int32]string{
		0: "LINEAR_CROSS_ENTROPY",
	}
	ForwardOp_value = map[string]int32{
		"LINEAR_CROSS_ENTROPY": 0,
	}
)

func (x ForwardOp) Enum() *ForwardOp {
	p := new(ForwardOp)
	*p = x
	return p
}

func (x ForwardOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForwardOp) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_sim_proto_enumTypes[1].Descriptor()
}

func (ForwardOp) Type() protoreflect.EnumType {
	return &file_gpu_sim_proto_enumTypes[1]
}

func (x ForwardOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForwardOp.Descriptor instead.
func (ForwardOp) EnumDescriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{1}
}

type ReduceOp int32

const (
	ReduceOp_SUM  ReduceOp = 0
	ReduceOp_PROD ReduceOp = 1
	ReduceOp_MIN  ReduceOp = 2
	ReduceOp_MAX  ReduceOp = 3
	// use for distributing data; overwrite the existing data with the new
	ReduceOp_NOP ReduceOp = 4
)

// Enum value maps for ReduceOp.
var (
	ReduceOp_name = map[int32]string{
		0: "SUM",
		1: "PROD",
		2: "MIN",
		3: "MAX",
		4: "NOP",
	}
	ReduceOp_value = map[string]int32{
		"SUM":  0,
		"PROD": 1,
		"MIN":  2,
		"MAX":  3,
		"NOP":  4,
	}
)

func (x ReduceOp) Enum() *ReduceOp {
	p := new(ReduceOp)
	*p = x
	return p
}

func (x ReduceOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReduceOp) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_sim_proto_enumTypes[2].Descriptor()
}

func (ReduceOp) Type() protoreflect.EnumType {
	return &file_gpu_sim_proto_enumTypes[2]
}

func (x ReduceOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReduceOp.Descriptor instead.
func (ReduceOp) EnumDescriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{2}
}

type DeviceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DeviceId) Reset() {
	*x = DeviceId{}
	mi := &file_gpu_sim_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceId) ProtoMessage() {}

func (x *DeviceId) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceId.ProtoReflect.Descriptor instead.
func (*DeviceId) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceId) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Rank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Rank) Reset() {
	*x = Rank{}
	mi := &file_gpu_sim_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rank) ProtoMessage() {}

func (x *Rank) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rank.ProtoReflect.Descriptor instead.
func (*Rank) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{1}
}

func (x *Rank) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MemAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MemAddr) Reset() {
	*x = MemAddr{}
	mi := &file_gpu_sim_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemAddr) ProtoMessage() {}

func (x *MemAddr) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemAddr.ProtoReflect.Descriptor instead.
func (*MemAddr) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{2}
}

func (x *MemAddr) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type StreamId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StreamId) Reset() {
	*x = StreamId{}
	mi := &file_gpu_sim_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamId) ProtoMessage() {}

func (x *StreamId) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamId.ProtoReflect.Descriptor instead.
func (*StreamId) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{3}
}

func (x *StreamId) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type DeviceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId   *DeviceId `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	MinMemAddr *MemAddr  `protobuf:"bytes,2,opt,name=minMemAddr,proto3" json:"minMemAddr,omitempty"`
	MaxMemAddr *MemAddr  `protobuf:"bytes,3,opt,name=maxMemAddr,proto3" json:"maxMemAddr,omitempty"`
}

func (x *DeviceMetadata) Reset() {
	*x = DeviceMetadata{}
	mi := &file_gpu_sim_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetadata) ProtoMessage() {}

func (x *DeviceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetadata.ProtoReflect.Descriptor instead.
func (*DeviceMetadata) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceMetadata) GetDeviceId() *DeviceId {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *DeviceMetadata) GetMinMemAddr() *MemAddr {
	if x != nil {
		return x.MinMemAddr
	}
	return nil
}

func (x *DeviceMetadata) GetMaxMemAddr() *MemAddr {
	if x != nil {
		return x.MaxMemAddr
	}
	return nil
}

type GetDeviceMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDeviceMetadataRequest) Reset() {
	*x = GetDeviceMetadataRequest{}
	mi := &file_gpu_sim_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeviceMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceMetadataRequest) ProtoMessage() {}

func (x *GetDeviceMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceMetadataRequest) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{5}
}

type GetDeviceMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DeviceMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetDeviceMetadataResponse) Reset() {
	*x = GetDeviceMetadataResponse{}
	mi := &file_gpu_sim_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeviceMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceMetadataResponse) ProtoMessage() {}

func (x *GetDeviceMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceMetadataResponse) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{6}
}

func (x *GetDeviceMetadataResponse) GetMetadata() *DeviceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type BeginSendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendBuffAddr *MemAddr  `protobuf:"bytes,1,opt,name=sendBuffAddr,proto3" json:"sendBuffAddr,omitempty"`
	NumBytes     uint64    `protobuf:"varint,2,opt,name=numBytes,proto3" json:"numBytes,omitempty"`
	DstDeviceId  *DeviceId `protobuf:"bytes,3,opt,name=dstDeviceId,proto3" json:"dstDeviceId,omitempty"`
}

func (x *BeginSendRequest) Reset() {
	*x = BeginSendRequest{}
	mi := &file_gpu_sim_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginSendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginSendRequest) ProtoMessage() {}

func (x *BeginSendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginSendRequest.ProtoReflect.Descriptor instead.
func (*BeginSendRequest) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{7}
}

func (x *BeginSendRequest) GetSendBuffAddr() *MemAddr {
	if x != nil {
		return x.SendBuffAddr
	}
	return nil
}

func (x *BeginSendRequest) GetNumBytes() uint64 {
	if x != nil {
		return x.NumBytes
	}
	return 0
}

func (x *BeginSendRequest) GetDstDeviceId() *DeviceId {
	if x != nil {
		return x.DstDeviceId
	}
	return nil
}

type BeginSendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Initiated bool      `protobuf:"varint,1,opt,name=initiated,proto3" json:"initiated,omitempty"`
	StreamId  *StreamId `protobuf:"bytes,2,opt,name=streamId,proto3" json:"streamId,omitempty"`
}

func (x *BeginSendResponse) Reset() {
	*x = BeginSendResponse{}
	mi := &file_gpu_sim_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginSendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginSendResponse) ProtoMessage() {}

func (x *BeginSendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginSendResponse.ProtoReflect.Descriptor instead.
func (*BeginSendResponse) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{8}
}

func (x *BeginSendResponse) GetInitiated() bool {
	if x != nil {
		return x.Initiated
	}
	return false
}

func (x *BeginSendResponse) GetStreamId() *StreamId {
	if x != nil {
		return x.StreamId
	}
	return nil
}

type BeginReceiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId     *StreamId `protobuf:"bytes,1,opt,name=streamId,proto3" json:"streamId,omitempty"`
	RecvBuffAddr *MemAddr  `protobuf:"bytes,2,opt,name=recvBuffAddr,proto3" json:"recvBuffAddr,omitempty"`
	NumBytes     uint64    `protobuf:"varint,3,opt,name=numBytes,proto3" json:"numBytes,omitempty"`
	SrcDeviceId  *DeviceId `protobuf:"bytes,4,opt,name=srcDeviceId,proto3" json:"srcDeviceId,omitempty"`
	Op           ReduceOp  `protobuf:"varint,5,opt,name=op,proto3,enum=gpu_sim.ReduceOp" json:"op,omitempty"`
}

func (x *BeginReceiveRequest) Reset() {
	*x = BeginReceiveRequest{}
	mi := &file_gpu_sim_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginReceiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginReceiveRequest) ProtoMessage() {}

func (x *BeginReceiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginReceiveRequest.ProtoReflect.Descriptor instead.
func (*BeginReceiveRequest) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{9}
}

func (x *BeginReceiveRequest) GetStreamId() *StreamId {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *BeginReceiveRequest) GetRecvBuffAddr() *MemAddr {
	if x != nil {
		return x.RecvBuffAddr
	}
	return nil
}

func (x *BeginReceiveRequest) GetNumBytes() uint64 {
	if x != nil {
		return x.NumBytes
	}
	return 0
}

func (x *BeginReceiveRequest) GetSrcDeviceId() *DeviceId {
	if x != nil {
		return x.SrcDeviceId
	}
	return nil
}

func (x *BeginReceiveRequest) GetOp() ReduceOp {
	if x != nil {
		return x.Op
	}
	return ReduceOp_SUM
}

type BeginReceiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Initiated bool `protobuf:"varint,1,opt,name=initiated,proto3" json:"initiated,omitempty"`
}

func (x *BeginReceiveResponse) Reset() {
	*x = BeginReceiveResponse{}
	mi := &file_gpu_sim_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginReceiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginReceiveResponse) ProtoMessage() {}

func (x *BeginReceiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginReceiveResponse.ProtoReflect.Descriptor instead.
func (*BeginReceiveResponse) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{10}
}

func (x *BeginReceiveResponse) GetInitiated() bool {
	if x != nil {
		return x.Initiated
	}
	return false
}

type DataChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// You may add more fields here
	StreamId *StreamId `protobuf:"bytes,2,opt,name=streamId,proto3" json:"streamId,omitempty"`
}

func (x *DataChunk) Reset() {
	*x = DataChunk{}
	mi := &file_gpu_sim_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChunk) ProtoMessage() {}

func (x *DataChunk) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChunk.ProtoReflect.Descriptor instead.
func (*DataChunk) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{11}
}

func (x *DataChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DataChunk) GetStreamId() *StreamId {
	if x != nil {
		return x.StreamId
	}
	return nil
}

type StreamSendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *StreamSendResponse) Reset() {
	*x = StreamSendResponse{}
	mi := &file_gpu_sim_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamSendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSendResponse) ProtoMessage() {}

func (x *StreamSendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSendResponse.ProtoReflect.Descriptor instead.
func (*StreamSendResponse) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{12}
}

func (x *StreamSendResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetStreamStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId *StreamId `protobuf:"bytes,1,opt,name=streamId,proto3" json:"streamId,omitempty"`
}

func (x *GetStreamStatusRequest) Reset() {
	*x = GetStreamStatusRequest{}
	mi := &file_gpu_sim_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamStatusRequest) ProtoMessage() {}

func (x *GetStreamStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStreamStatusRequest) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{13}
}

func (x *GetStreamStatusRequest) GetStreamId() *StreamId {
	if x != nil {
		return x.StreamId
	}
	return nil
}

type GetStreamStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=gpu_sim.Status" json:"status,omitempty"`
}

func (x *GetStreamStatusResponse) Reset() {
	*x = GetStreamStatusResponse{}
	mi := &file_gpu_sim_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamStatusResponse) ProtoMessage() {}

func (x *GetStreamStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamStatusResponse.ProtoReflect.Descriptor instead.
func (*GetStreamStatusResponse) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{14}
}

func (x *GetStreamStatusResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_IN_PROGRESS
}

type ForwardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Memory address for the input (includes a column of ones for the bias)
	InputAddress *MemAddr `protobuf:"bytes,1,opt,name=inputAddress,proto3" json:"inputAddress,omitempty"`
	// Size (in bytes) of the input
	InputSize uint64 `protobuf:"varint,2,opt,name=inputSize,proto3" json:"inputSize,omitempty"`
	// Memory address for the weights (includes bias)
	WeightAddress *MemAddr `protobuf:"bytes,3,opt,name=weightAddress,proto3" json:"weightAddress,omitempty"`
	// Size (in bytes) of the weights
	WeightSize uint64 `protobuf:"varint,4,opt,name=weightSize,proto3" json:"weightSize,omitempty"`
	// Memory address for storing the output
	OutputAddress *MemAddr `protobuf:"bytes,5,opt,name=outputAddress,proto3" json:"outputAddress,omitempty"`
	// Size (in bytes) of the output
	OutputSize uint64 `protobuf:"varint,6,opt,name=outputSize,proto3" json:"outputSize,omitempty"`
	// Type of forward operation
	ForwardOp ForwardOp `protobuf:"varint,7,opt,name=forwardOp,proto3,enum=gpu_sim.ForwardOp" json:"forwardOp,omitempty"`
	// Array of memory addresses for gradient chunks
	GradientAddresses []*MemAddr `protobuf:"bytes,8,rep,name=gradientAddresses,proto3" json:"gradientAddresses,omitempty"`
}

func (x *ForwardRequest) Reset() {
	*x = ForwardRequest{}
	mi := &file_gpu_sim_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardRequest) ProtoMessage() {}

func (x *ForwardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardRequest.ProtoReflect.Descriptor instead.
func (*ForwardRequest) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{15}
}

func (x *ForwardRequest) GetInputAddress() *MemAddr {
	if x != nil {
		return x.InputAddress
	}
	return nil
}

func (x *ForwardRequest) GetInputSize() uint64 {
	if x != nil {
		return x.InputSize
	}
	return 0
}

func (x *ForwardRequest) GetWeightAddress() *MemAddr {
	if x != nil {
		return x.WeightAddress
	}
	return nil
}

func (x *ForwardRequest) GetWeightSize() uint64 {
	if x != nil {
		return x.WeightSize
	}
	return 0
}

func (x *ForwardRequest) GetOutputAddress() *MemAddr {
	if x != nil {
		return x.OutputAddress
	}
	return nil
}

func (x *ForwardRequest) GetOutputSize() uint64 {
	if x != nil {
		return x.OutputSize
	}
	return 0
}

func (x *ForwardRequest) GetForwardOp() ForwardOp {
	if x != nil {
		return x.ForwardOp
	}
	return ForwardOp_LINEAR_CROSS_ENTROPY
}

func (x *ForwardRequest) GetGradientAddresses() []*MemAddr {
	if x != nil {
		return x.GradientAddresses
	}
	return nil
}

type ForwardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Loss    float64 `protobuf:"fixed64,2,opt,name=loss,proto3" json:"loss,omitempty"`
}

func (x *ForwardResponse) Reset() {
	*x = ForwardResponse{}
	mi := &file_gpu_sim_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardResponse) ProtoMessage() {}

func (x *ForwardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardResponse.ProtoReflect.Descriptor instead.
func (*ForwardResponse) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{16}
}

func (x *ForwardResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ForwardResponse) GetLoss() float64 {
	if x != nil {
		return x.Loss
	}
	return 0
}

type BackwardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeightAddress *MemAddr `protobuf:"bytes,1,opt,name=weightAddress,proto3" json:"weightAddress,omitempty"`
	WeightSize    uint64   `protobuf:"varint,2,opt,name=weightSize,proto3" json:"weightSize,omitempty"`
	// Array of memory addresses for gradient chunks
	GradientAddresses []*MemAddr `protobuf:"bytes,3,rep,name=gradientAddresses,proto3" json:"gradientAddresses,omitempty"`
	GradientSize      uint64     `protobuf:"varint,4,opt,name=gradientSize,proto3" json:"gradientSize,omitempty"`
	// Learning rate for weight update
	LearningRate float64 `protobuf:"fixed64,5,opt,name=learningRate,proto3" json:"learningRate,omitempty"`
}

func (x *BackwardRequest) Reset() {
	*x = BackwardRequest{}
	mi := &file_gpu_sim_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackwardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackwardRequest) ProtoMessage() {}

func (x *BackwardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackwardRequest.ProtoReflect.Descriptor instead.
func (*BackwardRequest) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{17}
}

func (x *BackwardRequest) GetWeightAddress() *MemAddr {
	if x != nil {
		return x.WeightAddress
	}
	return nil
}

func (x *BackwardRequest) GetWeightSize() uint64 {
	if x != nil {
		return x.WeightSize
	}
	return 0
}

func (x *BackwardRequest) GetGradientAddresses() []*MemAddr {
	if x != nil {
		return x.GradientAddresses
	}
	return nil
}

func (x *BackwardRequest) GetGradientSize() uint64 {
	if x != nil {
		return x.GradientSize
	}
	return 0
}

func (x *BackwardRequest) GetLearningRate() float64 {
	if x != nil {
		return x.LearningRate
	}
	return 0
}

type BackwardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *BackwardResponse) Reset() {
	*x = BackwardResponse{}
	mi := &file_gpu_sim_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackwardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackwardResponse) ProtoMessage() {}

func (x *BackwardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackwardResponse.ProtoReflect.Descriptor instead.
func (*BackwardResponse) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{18}
}

func (x *BackwardResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Create a new communicator with a number of GPUs
type CommInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumDevices uint32 `protobuf:"varint,1,opt,name=numDevices,proto3" json:"numDevices,omitempty"`
}

func (x *CommInitRequest) Reset() {
	*x = CommInitRequest{}
	mi := &file_gpu_sim_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommInitRequest) ProtoMessage() {}

func (x *CommInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommInitRequest.ProtoReflect.Descriptor instead.
func (*CommInitRequest) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{19}
}

func (x *CommInitRequest) GetNumDevices() uint32 {
	if x != nil {
		return x.NumDevices
	}
	return 0
}

type CommInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// If successful, the response will contain a unique communicator ID.
	CommId  uint64            `protobuf:"varint,2,opt,name=commId,proto3" json:"commId,omitempty"`
	Devices []*DeviceMetadata `protobuf:"bytes,3,rep,name=devices,proto3" json:"devices,omitempty"` // Add more metadata here if needed
}

func (x *CommInitResponse) Reset() {
	*x = CommInitResponse{}
	mi := &file_gpu_sim_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommInitResponse) ProtoMessage() {}

func (x *CommInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommInitResponse.ProtoReflect.Descriptor instead.
func (*CommInitResponse) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{20}
}

func (x *CommInitResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CommInitResponse) GetCommId() uint64 {
	if x != nil {
		return x.CommId
	}
	return 0
}

func (x *CommInitResponse) GetDevices() []*DeviceMetadata {
	if x != nil {
		return x.Devices
	}
	return nil
}

type GetCommStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommId uint64 `protobuf:"varint,1,opt,name=commId,proto3" json:"commId,omitempty"`
}

func (x *GetCommStatusRequest) Reset() {
	*x = GetCommStatusRequest{}
	mi := &file_gpu_sim_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommStatusRequest) ProtoMessage() {}

func (x *GetCommStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommStatusRequest.ProtoReflect.Descriptor instead.
func (*GetCommStatusRequest) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{21}
}

func (x *GetCommStatusRequest) GetCommId() uint64 {
	if x != nil {
		return x.CommId
	}
	return 0
}

type GetCommStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=gpu_sim.Status" json:"status,omitempty"`
}

func (x *GetCommStatusResponse) Reset() {
	*x = GetCommStatusResponse{}
	mi := &file_gpu_sim_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommStatusResponse) ProtoMessage() {}

func (x *GetCommStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommStatusResponse.ProtoReflect.Descriptor instead.
func (*GetCommStatusResponse) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{22}
}

func (x *GetCommStatusResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_IN_PROGRESS
}

// Group operation messages
type GroupStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommId uint64 `protobuf:"varint,1,opt,name=commId,proto3" json:"commId,omitempty"`
}

func (x *GroupStartRequest) Reset() {
	*x = GroupStartRequest{}
	mi := &file_gpu_sim_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupStartRequest) ProtoMessage() {}

func (x *GroupStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupStartRequest.ProtoReflect.Descriptor instead.
func (*GroupStartRequest) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{23}
}

func (x *GroupStartRequest) GetCommId() uint64 {
	if x != nil {
		return x.CommId
	}
	return 0
}

type GroupStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *GroupStartResponse) Reset() {
	*x = GroupStartResponse{}
	mi := &file_gpu_sim_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupStartResponse) ProtoMessage() {}

func (x *GroupStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupStartResponse.ProtoReflect.Descriptor instead.
func (*GroupStartResponse) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{24}
}

func (x *GroupStartResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GroupEndRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommId uint64 `protobuf:"varint,1,opt,name=commId,proto3" json:"commId,omitempty"`
}

func (x *GroupEndRequest) Reset() {
	*x = GroupEndRequest{}
	mi := &file_gpu_sim_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupEndRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupEndRequest) ProtoMessage() {}

func (x *GroupEndRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupEndRequest.ProtoReflect.Descriptor instead.
func (*GroupEndRequest) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{25}
}

func (x *GroupEndRequest) GetCommId() uint64 {
	if x != nil {
		return x.CommId
	}
	return 0
}

type GroupEndResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *GroupEndResponse) Reset() {
	*x = GroupEndResponse{}
	mi := &file_gpu_sim_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupEndResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupEndResponse) ProtoMessage() {}

func (x *GroupEndResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupEndResponse.ProtoReflect.Descriptor instead.
func (*GroupEndResponse) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{26}
}

func (x *GroupEndResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type AllReduceRingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommId uint64   `protobuf:"varint,1,opt,name=commId,proto3" json:"commId,omitempty"`
	Count  uint64   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Op     ReduceOp `protobuf:"varint,3,opt,name=op,proto3,enum=gpu_sim.ReduceOp" json:"op,omitempty"`
	// Rank -> MemAddr; protobuf doesn't support message type keys or type aliases
	MemAddrs map[uint32]*MemAddr `protobuf:"bytes,4,rep,name=memAddrs,proto3" json:"memAddrs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AllReduceRingRequest) Reset() {
	*x = AllReduceRingRequest{}
	mi := &file_gpu_sim_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllReduceRingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllReduceRingRequest) ProtoMessage() {}

func (x *AllReduceRingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllReduceRingRequest.ProtoReflect.Descriptor instead.
func (*AllReduceRingRequest) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{27}
}

func (x *AllReduceRingRequest) GetCommId() uint64 {
	if x != nil {
		return x.CommId
	}
	return 0
}

func (x *AllReduceRingRequest) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AllReduceRingRequest) GetOp() ReduceOp {
	if x != nil {
		return x.Op
	}
	return ReduceOp_SUM
}

func (x *AllReduceRingRequest) GetMemAddrs() map[uint32]*MemAddr {
	if x != nil {
		return x.MemAddrs
	}
	return nil
}

type AllReduceRingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AllReduceRingResponse) Reset() {
	*x = AllReduceRingResponse{}
	mi := &file_gpu_sim_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllReduceRingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllReduceRingResponse) ProtoMessage() {}

func (x *AllReduceRingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllReduceRingResponse.ProtoReflect.Descriptor instead.
func (*AllReduceRingResponse) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{28}
}

func (x *AllReduceRingResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// "CPU" -> "GPU", i.e., GPUCoordinator -> GPUDevice
type MemcpyHostToDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostSrcData []byte    `protobuf:"bytes,1,opt,name=hostSrcData,proto3" json:"hostSrcData,omitempty"`
	DstDeviceId *DeviceId `protobuf:"bytes,2,opt,name=dstDeviceId,proto3" json:"dstDeviceId,omitempty"`
	DstMemAddr  *MemAddr  `protobuf:"bytes,3,opt,name=dstMemAddr,proto3" json:"dstMemAddr,omitempty"`
}

func (x *MemcpyHostToDeviceRequest) Reset() {
	*x = MemcpyHostToDeviceRequest{}
	mi := &file_gpu_sim_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemcpyHostToDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemcpyHostToDeviceRequest) ProtoMessage() {}

func (x *MemcpyHostToDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemcpyHostToDeviceRequest.ProtoReflect.Descriptor instead.
func (*MemcpyHostToDeviceRequest) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{29}
}

func (x *MemcpyHostToDeviceRequest) GetHostSrcData() []byte {
	if x != nil {
		return x.HostSrcData
	}
	return nil
}

func (x *MemcpyHostToDeviceRequest) GetDstDeviceId() *DeviceId {
	if x != nil {
		return x.DstDeviceId
	}
	return nil
}

func (x *MemcpyHostToDeviceRequest) GetDstMemAddr() *MemAddr {
	if x != nil {
		return x.DstMemAddr
	}
	return nil
}

type MemcpyHostToDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *MemcpyHostToDeviceResponse) Reset() {
	*x = MemcpyHostToDeviceResponse{}
	mi := &file_gpu_sim_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemcpyHostToDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemcpyHostToDeviceResponse) ProtoMessage() {}

func (x *MemcpyHostToDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemcpyHostToDeviceResponse.ProtoReflect.Descriptor instead.
func (*MemcpyHostToDeviceResponse) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{30}
}

func (x *MemcpyHostToDeviceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// "GPU" -> "CPU", i.e., GPUDevice -> GPUCoordinator
type MemcpyDeviceToHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcDeviceId *DeviceId `protobuf:"bytes,1,opt,name=srcDeviceId,proto3" json:"srcDeviceId,omitempty"`
	SrcMemAddr  *MemAddr  `protobuf:"bytes,2,opt,name=srcMemAddr,proto3" json:"srcMemAddr,omitempty"`
	NumBytes    uint64    `protobuf:"varint,3,opt,name=numBytes,proto3" json:"numBytes,omitempty"`
}

func (x *MemcpyDeviceToHostRequest) Reset() {
	*x = MemcpyDeviceToHostRequest{}
	mi := &file_gpu_sim_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemcpyDeviceToHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemcpyDeviceToHostRequest) ProtoMessage() {}

func (x *MemcpyDeviceToHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemcpyDeviceToHostRequest.ProtoReflect.Descriptor instead.
func (*MemcpyDeviceToHostRequest) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{31}
}

func (x *MemcpyDeviceToHostRequest) GetSrcDeviceId() *DeviceId {
	if x != nil {
		return x.SrcDeviceId
	}
	return nil
}

func (x *MemcpyDeviceToHostRequest) GetSrcMemAddr() *MemAddr {
	if x != nil {
		return x.SrcMemAddr
	}
	return nil
}

func (x *MemcpyDeviceToHostRequest) GetNumBytes() uint64 {
	if x != nil {
		return x.NumBytes
	}
	return 0
}

type MemcpyDeviceToHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DstData []byte `protobuf:"bytes,1,opt,name=dstData,proto3" json:"dstData,omitempty"`
}

func (x *MemcpyDeviceToHostResponse) Reset() {
	*x = MemcpyDeviceToHostResponse{}
	mi := &file_gpu_sim_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemcpyDeviceToHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemcpyDeviceToHostResponse) ProtoMessage() {}

func (x *MemcpyDeviceToHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemcpyDeviceToHostResponse.ProtoReflect.Descriptor instead.
func (*MemcpyDeviceToHostResponse) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{32}
}

func (x *MemcpyDeviceToHostResponse) GetDstData() []byte {
	if x != nil {
		return x.DstData
	}
	return nil
}

type MemcpyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Either:
	//
	//	*MemcpyRequest_HostToDevice
	//	*MemcpyRequest_DeviceToHost
	Either isMemcpyRequest_Either `protobuf_oneof:"either"`
}

func (x *MemcpyRequest) Reset() {
	*x = MemcpyRequest{}
	mi := &file_gpu_sim_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemcpyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemcpyRequest) ProtoMessage() {}

func (x *MemcpyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemcpyRequest.ProtoReflect.Descriptor instead.
func (*MemcpyRequest) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{33}
}

func (m *MemcpyRequest) GetEither() isMemcpyRequest_Either {
	if m != nil {
		return m.Either
	}
	return nil
}

func (x *MemcpyRequest) GetHostToDevice() *MemcpyHostToDeviceRequest {
	if x, ok := x.GetEither().(*MemcpyRequest_HostToDevice); ok {
		return x.HostToDevice
	}
	return nil
}

func (x *MemcpyRequest) GetDeviceToHost() *MemcpyDeviceToHostRequest {
	if x, ok := x.GetEither().(*MemcpyRequest_DeviceToHost); ok {
		return x.DeviceToHost
	}
	return nil
}

type isMemcpyRequest_Either interface {
	isMemcpyRequest_Either()
}

type MemcpyRequest_HostToDevice struct {
	HostToDevice *MemcpyHostToDeviceRequest `protobuf:"bytes,1,opt,name=hostToDevice,proto3,oneof"`
}

type MemcpyRequest_DeviceToHost struct {
	DeviceToHost *MemcpyDeviceToHostRequest `protobuf:"bytes,2,opt,name=deviceToHost,proto3,oneof"`
}

func (*MemcpyRequest_HostToDevice) isMemcpyRequest_Either() {}

func (*MemcpyRequest_DeviceToHost) isMemcpyRequest_Either() {}

type MemcpyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Either:
	//
	//	*MemcpyResponse_HostToDevice
	//	*MemcpyResponse_DeviceToHost
	Either isMemcpyResponse_Either `protobuf_oneof:"either"`
}

func (x *MemcpyResponse) Reset() {
	*x = MemcpyResponse{}
	mi := &file_gpu_sim_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemcpyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemcpyResponse) ProtoMessage() {}

func (x *MemcpyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_sim_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemcpyResponse.ProtoReflect.Descriptor instead.
func (*MemcpyResponse) Descriptor() ([]byte, []int) {
	return file_gpu_sim_proto_rawDescGZIP(), []int{34}
}

func (m *MemcpyResponse) GetEither() isMemcpyResponse_Either {
	if m != nil {
		return m.Either
	}
	return nil
}

func (x *MemcpyResponse) GetHostToDevice() *MemcpyHostToDeviceResponse {
	if x, ok := x.GetEither().(*MemcpyResponse_HostToDevice); ok {
		return x.HostToDevice
	}
	return nil
}

func (x *MemcpyResponse) GetDeviceToHost() *MemcpyDeviceToHostResponse {
	if x, ok := x.GetEither().(*MemcpyResponse_DeviceToHost); ok {
		return x.DeviceToHost
	}
	return nil
}

type isMemcpyResponse_Either interface {
	isMemcpyResponse_Either()
}

type MemcpyResponse_HostToDevice struct {
	HostToDevice *MemcpyHostToDeviceResponse `protobuf:"bytes,1,opt,name=hostToDevice,proto3,oneof"`
}

type MemcpyResponse_DeviceToHost struct {
	DeviceToHost *MemcpyDeviceToHostResponse `protobuf:"bytes,2,opt,name=deviceToHost,proto3,oneof"`
}

func (*MemcpyResponse_HostToDevice) isMemcpyResponse_Either() {}

func (*MemcpyResponse_DeviceToHost) isMemcpyResponse_Either() {}

var File_gpu_sim_proto protoreflect.FileDescriptor

var file_gpu_sim_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x22, 0x20, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1c, 0x0a, 0x04, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1f, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x20, 0x0a, 0x08, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x0a, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x41,
	0x64, 0x64, 0x72, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x30, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x4d, 0x65,
	0x6d, 0x41, 0x64, 0x64, 0x72, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64,
	0x72, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x99, 0x01, 0x0a, 0x10, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66,
	0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x70, 0x75,
	0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x52, 0x0c, 0x73, 0x65,
	0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75,
	0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x75,
	0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x70,
	0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b,
	0x64, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x11, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xee, 0x01,
	0x0a, 0x13, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69,
	0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x76, 0x42, 0x75, 0x66, 0x66,
	0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x70, 0x75,
	0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x76, 0x42, 0x75, 0x66, 0x66, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75,
	0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x75,
	0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x70,
	0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b,
	0x73, 0x72, 0x63, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69,
	0x6d, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x22, 0x34,
	0x0a, 0x14, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x4e, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69,
	0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x47, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x42, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73,
	0x69, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x86, 0x03, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x70, 0x75,
	0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x52, 0x0c, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64,
	0x72, 0x52, 0x0d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x36, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69,
	0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x4f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x67, 0x70,
	0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x52,
	0x09, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x12, 0x3e, 0x0a, 0x11, 0x67, 0x72,
	0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e,
	0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x52, 0x11, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x0f, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x0f,
	0x42, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d,
	0x2e, 0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x52, 0x0d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x4d, 0x65, 0x6d,
	0x41, 0x64, 0x64, 0x72, 0x52, 0x11, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x67,
	0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x22,
	0x2c, 0x0a, 0x10, 0x42, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x31, 0x0a,
	0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x22, 0x77, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2b, 0x0a, 0x11, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x29, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0xff, 0x01, 0x0a, 0x14, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x47, 0x0a, 0x08, 0x6d,
	0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x6d,
	0x41, 0x64, 0x64, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x41,
	0x64, 0x64, 0x72, 0x73, 0x1a, 0x4d, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d,
	0x2e, 0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x15, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x52, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x4d, 0x65, 0x6d, 0x63, 0x70,
	0x79, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x72, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x53,
	0x72, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x70,
	0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b,
	0x64, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x64,
	0x73, 0x74, 0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64,
	0x72, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x22, 0x36, 0x0a,
	0x1a, 0x4d, 0x65, 0x6d, 0x63, 0x70, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x19, 0x4d, 0x65, 0x6d, 0x63, 0x70, 0x79,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73,
	0x69, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x73, 0x72, 0x63,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x4d,
	0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67,
	0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x52, 0x0a,
	0x73, 0x72, 0x63, 0x4d, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75,
	0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x75,
	0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x1a, 0x4d, 0x65, 0x6d, 0x63, 0x70, 0x79,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xad,
	0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x63, 0x70, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x48, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d,
	0x2e, 0x4d, 0x65, 0x6d, 0x63, 0x70, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x68, 0x6f,
	0x73, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x63, 0x70,
	0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f,
	0x48, 0x6f, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x22, 0xb0,
	0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x63, 0x70, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69,
	0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x63, 0x70, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x68, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x4d, 0x65, 0x6d,
	0x63, 0x70, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x65, 0x69, 0x74, 0x68, 0x65,
	0x72, 0x2a, 0x32, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x25, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x4f, 0x70, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f, 0x43, 0x52, 0x4f,
	0x53, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x4f, 0x50, 0x59, 0x10, 0x00, 0x2a, 0x38, 0x0a, 0x08,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4f, 0x70, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x52, 0x4f, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d,
	0x49, 0x4e, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x12, 0x07, 0x0a,
	0x03, 0x4e, 0x4f, 0x50, 0x10, 0x04, 0x32, 0x9c, 0x04, 0x0a, 0x09, 0x47, 0x50, 0x55, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x2e, 0x67, 0x70, 0x75, 0x5f,
	0x73, 0x69, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67,
	0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x12,
	0x19, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x53,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x70, 0x75,
	0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73,
	0x69, 0x6d, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d,
	0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x1b, 0x2e, 0x67, 0x70, 0x75, 0x5f,
	0x73, 0x69, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x2e,
	0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x17, 0x2e,
	0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d,
	0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x42, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x12, 0x18,
	0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73,
	0x69, 0x6d, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xc0, 0x03, 0x0a, 0x0e, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d,
	0x49, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x49, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x67,
	0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x70,
	0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x2e, 0x67, 0x70,
	0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69,
	0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45,
	0x6e, 0x64, 0x12, 0x18, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67,
	0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x2e, 0x67, 0x70, 0x75,
	0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x70, 0x75, 0x5f,
	0x73, 0x69, 0x6d, 0x2e, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x06, 0x4d,
	0x65, 0x6d, 0x63, 0x70, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e,
	0x4d, 0x65, 0x6d, 0x63, 0x70, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x67, 0x70, 0x75, 0x5f, 0x73, 0x69, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x63, 0x70, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gpu_sim_proto_rawDescOnce sync.Once
	file_gpu_sim_proto_rawDescData = file_gpu_sim_proto_rawDesc
)

func file_gpu_sim_proto_rawDescGZIP() []byte {
	file_gpu_sim_proto_rawDescOnce.Do(func() {
		file_gpu_sim_proto_rawDescData = protoimpl.X.CompressGZIP(file_gpu_sim_proto_rawDescData)
	})
	return file_gpu_sim_proto_rawDescData
}

var file_gpu_sim_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_gpu_sim_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_gpu_sim_proto_goTypes = []any{
	(Status)(0),                        // 0: gpu_sim.Status
	(ForwardOp)(0),                     // 1: gpu_sim.ForwardOp
	(ReduceOp)(0),                      // 2: gpu_sim.ReduceOp
	(*DeviceId)(nil),                   // 3: gpu_sim.DeviceId
	(*Rank)(nil),                       // 4: gpu_sim.Rank
	(*MemAddr)(nil),                    // 5: gpu_sim.MemAddr
	(*StreamId)(nil),                   // 6: gpu_sim.StreamId
	(*DeviceMetadata)(nil),             // 7: gpu_sim.DeviceMetadata
	(*GetDeviceMetadataRequest)(nil),   // 8: gpu_sim.GetDeviceMetadataRequest
	(*GetDeviceMetadataResponse)(nil),  // 9: gpu_sim.GetDeviceMetadataResponse
	(*BeginSendRequest)(nil),           // 10: gpu_sim.BeginSendRequest
	(*BeginSendResponse)(nil),          // 11: gpu_sim.BeginSendResponse
	(*BeginReceiveRequest)(nil),        // 12: gpu_sim.BeginReceiveRequest
	(*BeginReceiveResponse)(nil),       // 13: gpu_sim.BeginReceiveResponse
	(*DataChunk)(nil),                  // 14: gpu_sim.DataChunk
	(*StreamSendResponse)(nil),         // 15: gpu_sim.StreamSendResponse
	(*GetStreamStatusRequest)(nil),     // 16: gpu_sim.GetStreamStatusRequest
	(*GetStreamStatusResponse)(nil),    // 17: gpu_sim.GetStreamStatusResponse
	(*ForwardRequest)(nil),             // 18: gpu_sim.ForwardRequest
	(*ForwardResponse)(nil),            // 19: gpu_sim.ForwardResponse
	(*BackwardRequest)(nil),            // 20: gpu_sim.BackwardRequest
	(*BackwardResponse)(nil),           // 21: gpu_sim.BackwardResponse
	(*CommInitRequest)(nil),            // 22: gpu_sim.CommInitRequest
	(*CommInitResponse)(nil),           // 23: gpu_sim.CommInitResponse
	(*GetCommStatusRequest)(nil),       // 24: gpu_sim.GetCommStatusRequest
	(*GetCommStatusResponse)(nil),      // 25: gpu_sim.GetCommStatusResponse
	(*GroupStartRequest)(nil),          // 26: gpu_sim.GroupStartRequest
	(*GroupStartResponse)(nil),         // 27: gpu_sim.GroupStartResponse
	(*GroupEndRequest)(nil),            // 28: gpu_sim.GroupEndRequest
	(*GroupEndResponse)(nil),           // 29: gpu_sim.GroupEndResponse
	(*AllReduceRingRequest)(nil),       // 30: gpu_sim.AllReduceRingRequest
	(*AllReduceRingResponse)(nil),      // 31: gpu_sim.AllReduceRingResponse
	(*MemcpyHostToDeviceRequest)(nil),  // 32: gpu_sim.MemcpyHostToDeviceRequest
	(*MemcpyHostToDeviceResponse)(nil), // 33: gpu_sim.MemcpyHostToDeviceResponse
	(*MemcpyDeviceToHostRequest)(nil),  // 34: gpu_sim.MemcpyDeviceToHostRequest
	(*MemcpyDeviceToHostResponse)(nil), // 35: gpu_sim.MemcpyDeviceToHostResponse
	(*MemcpyRequest)(nil),              // 36: gpu_sim.MemcpyRequest
	(*MemcpyResponse)(nil),             // 37: gpu_sim.MemcpyResponse
	nil,                                // 38: gpu_sim.AllReduceRingRequest.MemAddrsEntry
}
var file_gpu_sim_proto_depIdxs = []int32{
	3,  // 0: gpu_sim.DeviceMetadata.deviceId:type_name -> gpu_sim.DeviceId
	5,  // 1: gpu_sim.DeviceMetadata.minMemAddr:type_name -> gpu_sim.MemAddr
	5,  // 2: gpu_sim.DeviceMetadata.maxMemAddr:type_name -> gpu_sim.MemAddr
	7,  // 3: gpu_sim.GetDeviceMetadataResponse.metadata:type_name -> gpu_sim.DeviceMetadata
	5,  // 4: gpu_sim.BeginSendRequest.sendBuffAddr:type_name -> gpu_sim.MemAddr
	3,  // 5: gpu_sim.BeginSendRequest.dstDeviceId:type_name -> gpu_sim.DeviceId
	6,  // 6: gpu_sim.BeginSendResponse.streamId:type_name -> gpu_sim.StreamId
	6,  // 7: gpu_sim.BeginReceiveRequest.streamId:type_name -> gpu_sim.StreamId
	5,  // 8: gpu_sim.BeginReceiveRequest.recvBuffAddr:type_name -> gpu_sim.MemAddr
	3,  // 9: gpu_sim.BeginReceiveRequest.srcDeviceId:type_name -> gpu_sim.DeviceId
	2,  // 10: gpu_sim.BeginReceiveRequest.op:type_name -> gpu_sim.ReduceOp
	6,  // 11: gpu_sim.DataChunk.streamId:type_name -> gpu_sim.StreamId
	6,  // 12: gpu_sim.GetStreamStatusRequest.streamId:type_name -> gpu_sim.StreamId
	0,  // 13: gpu_sim.GetStreamStatusResponse.status:type_name -> gpu_sim.Status
	5,  // 14: gpu_sim.ForwardRequest.inputAddress:type_name -> gpu_sim.MemAddr
	5,  // 15: gpu_sim.ForwardRequest.weightAddress:type_name -> gpu_sim.MemAddr
	5,  // 16: gpu_sim.ForwardRequest.outputAddress:type_name -> gpu_sim.MemAddr
	1,  // 17: gpu_sim.ForwardRequest.forwardOp:type_name -> gpu_sim.ForwardOp
	5,  // 18: gpu_sim.ForwardRequest.gradientAddresses:type_name -> gpu_sim.MemAddr
	5,  // 19: gpu_sim.BackwardRequest.weightAddress:type_name -> gpu_sim.MemAddr
	5,  // 20: gpu_sim.BackwardRequest.gradientAddresses:type_name -> gpu_sim.MemAddr
	7,  // 21: gpu_sim.CommInitResponse.devices:type_name -> gpu_sim.DeviceMetadata
	0,  // 22: gpu_sim.GetCommStatusResponse.status:type_name -> gpu_sim.Status
	2,  // 23: gpu_sim.AllReduceRingRequest.op:type_name -> gpu_sim.ReduceOp
	38, // 24: gpu_sim.AllReduceRingRequest.memAddrs:type_name -> gpu_sim.AllReduceRingRequest.MemAddrsEntry
	3,  // 25: gpu_sim.MemcpyHostToDeviceRequest.dstDeviceId:type_name -> gpu_sim.DeviceId
	5,  // 26: gpu_sim.MemcpyHostToDeviceRequest.dstMemAddr:type_name -> gpu_sim.MemAddr
	3,  // 27: gpu_sim.MemcpyDeviceToHostRequest.srcDeviceId:type_name -> gpu_sim.DeviceId
	5,  // 28: gpu_sim.MemcpyDeviceToHostRequest.srcMemAddr:type_name -> gpu_sim.MemAddr
	32, // 29: gpu_sim.MemcpyRequest.hostToDevice:type_name -> gpu_sim.MemcpyHostToDeviceRequest
	34, // 30: gpu_sim.MemcpyRequest.deviceToHost:type_name -> gpu_sim.MemcpyDeviceToHostRequest
	33, // 31: gpu_sim.MemcpyResponse.hostToDevice:type_name -> gpu_sim.MemcpyHostToDeviceResponse
	35, // 32: gpu_sim.MemcpyResponse.deviceToHost:type_name -> gpu_sim.MemcpyDeviceToHostResponse
	5,  // 33: gpu_sim.AllReduceRingRequest.MemAddrsEntry.value:type_name -> gpu_sim.MemAddr
	8,  // 34: gpu_sim.GPUDevice.GetDeviceMetadata:input_type -> gpu_sim.GetDeviceMetadataRequest
	10, // 35: gpu_sim.GPUDevice.BeginSend:input_type -> gpu_sim.BeginSendRequest
	12, // 36: gpu_sim.GPUDevice.BeginReceive:input_type -> gpu_sim.BeginReceiveRequest
	14, // 37: gpu_sim.GPUDevice.StreamSend:input_type -> gpu_sim.DataChunk
	16, // 38: gpu_sim.GPUDevice.GetStreamStatus:input_type -> gpu_sim.GetStreamStatusRequest
	18, // 39: gpu_sim.GPUDevice.Forward:input_type -> gpu_sim.ForwardRequest
	20, // 40: gpu_sim.GPUDevice.Backward:input_type -> gpu_sim.BackwardRequest
	22, // 41: gpu_sim.GPUCoordinator.CommInit:input_type -> gpu_sim.CommInitRequest
	24, // 42: gpu_sim.GPUCoordinator.GetCommStatus:input_type -> gpu_sim.GetCommStatusRequest
	26, // 43: gpu_sim.GPUCoordinator.GroupStart:input_type -> gpu_sim.GroupStartRequest
	28, // 44: gpu_sim.GPUCoordinator.GroupEnd:input_type -> gpu_sim.GroupEndRequest
	30, // 45: gpu_sim.GPUCoordinator.AllReduceRing:input_type -> gpu_sim.AllReduceRingRequest
	36, // 46: gpu_sim.GPUCoordinator.Memcpy:input_type -> gpu_sim.MemcpyRequest
	9,  // 47: gpu_sim.GPUDevice.GetDeviceMetadata:output_type -> gpu_sim.GetDeviceMetadataResponse
	11, // 48: gpu_sim.GPUDevice.BeginSend:output_type -> gpu_sim.BeginSendResponse
	13, // 49: gpu_sim.GPUDevice.BeginReceive:output_type -> gpu_sim.BeginReceiveResponse
	15, // 50: gpu_sim.GPUDevice.StreamSend:output_type -> gpu_sim.StreamSendResponse
	17, // 51: gpu_sim.GPUDevice.GetStreamStatus:output_type -> gpu_sim.GetStreamStatusResponse
	19, // 52: gpu_sim.GPUDevice.Forward:output_type -> gpu_sim.ForwardResponse
	21, // 53: gpu_sim.GPUDevice.Backward:output_type -> gpu_sim.BackwardResponse
	23, // 54: gpu_sim.GPUCoordinator.CommInit:output_type -> gpu_sim.CommInitResponse
	25, // 55: gpu_sim.GPUCoordinator.GetCommStatus:output_type -> gpu_sim.GetCommStatusResponse
	27, // 56: gpu_sim.GPUCoordinator.GroupStart:output_type -> gpu_sim.GroupStartResponse
	29, // 57: gpu_sim.GPUCoordinator.GroupEnd:output_type -> gpu_sim.GroupEndResponse
	31, // 58: gpu_sim.GPUCoordinator.AllReduceRing:output_type -> gpu_sim.AllReduceRingResponse
	37, // 59: gpu_sim.GPUCoordinator.Memcpy:output_type -> gpu_sim.MemcpyResponse
	47, // [47:60] is the sub-list for method output_type
	34, // [34:47] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_gpu_sim_proto_init() }
func file_gpu_sim_proto_init() {
	if File_gpu_sim_proto != nil {
		return
	}
	file_gpu_sim_proto_msgTypes[33].OneofWrappers = []any{
		(*MemcpyRequest_HostToDevice)(nil),
		(*MemcpyRequest_DeviceToHost)(nil),
	}
	file_gpu_sim_proto_msgTypes[34].OneofWrappers = []any{
		(*MemcpyResponse_HostToDevice)(nil),
		(*MemcpyResponse_DeviceToHost)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gpu_sim_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_gpu_sim_proto_goTypes,
		DependencyIndexes: file_gpu_sim_proto_depIdxs,
		EnumInfos:         file_gpu_sim_proto_enumTypes,
		MessageInfos:      file_gpu_sim_proto_msgTypes,
	}.Build()
	File_gpu_sim_proto = out.File
	file_gpu_sim_proto_rawDesc = nil
	file_gpu_sim_proto_goTypes = nil
	file_gpu_sim_proto_depIdxs = nil
}
